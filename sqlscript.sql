REM   Script: Completed
REM   Completed Data Warehouse for HW1

INSERT INTO EVENTS (ID, BASE_EVENT_ID, EVENT_GENDER) 
SELECT ID, BASE_EVENT_ID, EVENT_GENDER 
FROM OLYM.OLYM_EVENTS;

CREATE TABLE BASE_EVENTS ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE_ID INT,  
    EVENT varchar2(60) 
);

CREATE TABLE EVENTS ( 
    ID INT PRIMARY KEY, 
    BASE_EVENT_ID INT,  
    EVENT_GENDER varchar2(1) 
    -- Add additional columns as needed 
);

INSERT INTO BASE_EVENTS (ID,DISCIPLINE_ID, EVENT) 
SELECT ID, DISCIPLINE_ID, EVENT 
FROM OLYM.OLYM_BASE_EVENTS;

CREATE TABLE DISCIPLINE ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE varchar2(30) 
);

INSERT INTO OLYM_MEDALS_FACT (Event_ID) 
SELECT ID 
FROM EVENTS;

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Silver_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Silver' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.TOTAL_MEDALS = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE (M.MEDAL = 'Gold' OR M.MEDAL = 'Silver' OR M.MEDAL = 'Bronze') AND  M.EVENT_ID = MF.Event_ID 
);

SELECT * 
FROM OLYM_MEDALS_FACT 
ORDER BY Event_ID;

INSERT INTO DISCIPLINE (ID, DISCIPLINE) 
SELECT ID, DISCIPLINE 
FROM OLYM.OLYM_DISCIPLINES;

CREATE TABLE OLYM_MEDALS_FACT ( 
    Event_ID INT, 
    Base_Event_ID INT, 
    Bronze_Medals INT, 
    Silver_Medals INT, 
    Gold_Medals INT, 
    Total_Medals INT, 
    FOREIGN KEY (Event_ID) REFERENCES EVENTS(ID), 
    FOREIGN KEY (Base_Event_ID) REFERENCES BASE_EVENTS(ID) 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Bronze_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Bronze' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Gold_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Gold' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Base_Event_ID = ( 
    SELECT E.BASE_EVENT_ID 
    FROM OLYM.OLYM_EVENTS E 
    WHERE  E.ID = MF.EVENT_ID 
);

SELECT * 
FROM OLYM_MEDALS_FACT 
ORDER BY Event_ID;

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    COALESCE(E.EVENT_GENDER, 'All Genders') AS EVENT_GENDER, 
    BA.EVENT, 
    COALESCE(M.MEDAL, 'TIE') AS DOMINANT_MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
RIGHT JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    E.EVENT_GENDER AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    COALESCE(E.EVENT_GENDER, 'NON SPECIFIED') AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS GoldMedalsByEvent, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS SilverMedalsByEvent, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS BronzeMedalsByEvent, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS RankByEvent 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    EVENT_ID, 
    BASE_EVENT_ID, 
    GOLD_MEDALS, 
    SILVER_MEDALS, 
    BRONZE_MEDALS, 
    TOTAL_MEDALS, 
    SUM(GOLD_MEDALS) OVER (PARTITION BY EVENT_ID) AS TotalGoldMedalsByEvent, 
    SUM(SILVER_MEDALS) OVER (PARTITION BY EVENT_ID) AS TotalSilverMedalsByEvent, 
    SUM(BRONZE_MEDALS) OVER (PARTITION BY EVENT_ID) AS TotalBronzeMedalsByEvent, 
    SUM(TOTAL_MEDALS) OVER (PARTITION BY EVENT_ID) AS TotalMedalsByEvent, 
    RANK() OVER (PARTITION BY BASE_EVENT_ID ORDER BY TOTAL_MEDALS DESC) AS RankByBaseEvent 
FROM OLYM_MEDALS_FACT;

SELECT 
    EVENT_ID, 
    BASE_EVENT_ID, 
    GOLD_MEDALS, 
    SILVER_MEDALS, 
    BRONZE_MEDALS, 
    TOTAL_MEDALS, 
    RANK() OVER (PARTITION BY BASE_EVENT_ID ORDER BY TOTAL_MEDALS DESC) AS RankByBaseEvent 
FROM OLYM_MEDALS_FACT;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINES D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    EVENT_ID, 
    BASE_EVENT_ID, 
    GOLD_MEDALS, 
    SILVER_MEDALS, 
    BRONZE_MEDALS, 
    TOTAL_MEDALS, 
    RANK() OVER (PARTITION BY BASE_EVENT_ID ORDER BY TOTAL_MEDALS DESC) AS Rank_By_Base_Event 
FROM OLYM_MEDALS_FACT;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINES D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS BE 
JOIN EVENTS E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS GoldMedalsByEvent, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS SilverMedalsByEvent, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS BronzeMedalsByEvent, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS RankByEvent 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    EVENT_ID, 
    BASE_EVENT_ID, 
    GOLD_MEDALS, 
    SILVER_MEDALS, 
    BRONZE_MEDALS, 
    TOTAL_MEDALS, 
    RANK() OVER (PARTITION BY BASE_EVENT_ID ORDER BY TOTAL_MEDALS DESC) AS Rank_By_Base_Event 
FROM OLYM_MEDALS_FACT;

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS Gold_Medals_By_Event, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS Silver_Medals_By_Event, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS Bronze_Medals_By_Event, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS Rank_By_Event 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    COALESCE(E.EVENT_GENDER, 'NON SPECIFIED') AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    COALESCE(E.EVENT_GENDER, 'All Genders') AS EVENT_GENDER, 
    BA.EVENT, 
    COALESCE(M.MEDAL, 'TIE') AS DOMINANT_MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
RIGHT JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

CREATE TABLE EVENTS_DIM ( 
    ID INT PRIMARY KEY, 
    BASE_EVENT_ID INT,  
    EVENT_GENDER varchar2(1) 
    -- Add additional columns as needed 
);

INSERT INTO EVENTS_DIM (ID, BASE_EVENT_ID, EVENT_GENDER) 
SELECT ID, BASE_EVENT_ID, EVENT_GENDER 
FROM OLYM.OLYM_EVENTS;

CREATE TABLE BASE_EVENTS_DIM ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE_ID INT,  
    EVENT varchar2(60) 
);

INSERT INTO BASE_EVENTS_DIM (ID,DISCIPLINE_ID, EVENT) 
SELECT ID, DISCIPLINE_ID, EVENT 
FROM OLYM.OLYM_BASE_EVENTS;

CREATE TABLE DISCIPLINE_DIM ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE varchar2(30) 
);

INSERT INTO DISCIPLINE_DIM (ID, DISCIPLINE) 
SELECT ID, DISCIPLINE 
FROM OLYM.OLYM_DISCIPLINES;

CREATE TABLE OLYM_MEDALS_FACT ( 
    Event_ID INT, 
    Base_Event_ID INT, 
    Bronze_Medals INT, 
    Silver_Medals INT, 
    Gold_Medals INT, 
    Total_Medals INT, 
    FOREIGN KEY (Event_ID) REFERENCES EVENTS_DIM(ID), 
    FOREIGN KEY (Base_Event_ID) REFERENCES BASE_EVENTS_DIM(ID) 
);

INSERT INTO OLYM_MEDALS_FACT (Event_ID) 
SELECT ID 
FROM EVENTS;

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Bronze_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Bronze' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Silver_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Silver' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Gold_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Gold' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.TOTAL_MEDALS = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE (M.MEDAL = 'Gold' OR M.MEDAL = 'Silver' OR M.MEDAL = 'Bronze') AND  M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Base_Event_ID = ( 
    SELECT E.BASE_EVENT_ID 
    FROM OLYM.OLYM_EVENTS E 
    WHERE  E.ID = MF.EVENT_ID 
);

SELECT * 
FROM OLYM_MEDALS_FACT 
ORDER BY Event_ID;

SELECT 
    COALESCE(E.EVENT_GENDER, 'All Genders') AS EVENT_GENDER, 
    BA.EVENT, 
    COALESCE(M.MEDAL, 'TIE') AS DOMINANT_MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
RIGHT JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    COALESCE(E.EVENT_GENDER, 'NON SPECIFIED') AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS_DIM E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS Gold_Medals_By_Event, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS Silver_Medals_By_Event, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS Bronze_Medals_By_Event, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS Rank_By_Event 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

CREATE TABLE EVENTS_DIM ( 
    ID INT PRIMARY KEY, 
    BASE_EVENT_ID INT,  
    EVENT_GENDER varchar2(1) 
    -- Add additional columns as needed 
);

INSERT INTO EVENTS_DIM (ID, BASE_EVENT_ID, EVENT_GENDER) 
SELECT ID, BASE_EVENT_ID, EVENT_GENDER 
FROM OLYM.OLYM_EVENTS;

CREATE TABLE BASE_EVENTS_DIM ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE_ID INT,  
    EVENT varchar2(60) 
);

INSERT INTO BASE_EVENTS_DIM (ID,DISCIPLINE_ID, EVENT) 
SELECT ID, DISCIPLINE_ID, EVENT 
FROM OLYM.OLYM_BASE_EVENTS;

CREATE TABLE DISCIPLINE_DIM ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE varchar2(30) 
);

INSERT INTO DISCIPLINE_DIM (ID, DISCIPLINE) 
SELECT ID, DISCIPLINE 
FROM OLYM.OLYM_DISCIPLINES;

CREATE TABLE OLYM_MEDALS_FACT ( 
    Event_ID INT, 
    Base_Event_ID INT, 
    Bronze_Medals INT, 
    Silver_Medals INT, 
    Gold_Medals INT, 
    Total_Medals INT, 
    FOREIGN KEY (Event_ID) REFERENCES EVENTS_DIM(ID), 
    FOREIGN KEY (Base_Event_ID) REFERENCES BASE_EVENTS_DIM(ID) 
);

INSERT INTO OLYM_MEDALS_FACT (Event_ID) 
SELECT ID 
FROM EVENTS;

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Bronze_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Bronze' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Silver_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Silver' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Gold_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Gold' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.TOTAL_MEDALS = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE (M.MEDAL = 'Gold' OR M.MEDAL = 'Silver' OR M.MEDAL = 'Bronze') AND  M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Base_Event_ID = ( 
    SELECT E.BASE_EVENT_ID 
    FROM OLYM.OLYM_EVENTS E 
    WHERE  E.ID = MF.EVENT_ID 
);

SELECT * 
FROM OLYM_MEDALS_FACT 
ORDER BY Event_ID;

SELECT 
    COALESCE(E.EVENT_GENDER, 'All Genders') AS EVENT_GENDER, 
    BA.EVENT, 
    COALESCE(M.MEDAL, 'TIE') AS DOMINANT_MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
RIGHT JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    COALESCE(E.EVENT_GENDER, 'NON SPECIFIED') AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS_DIM E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS Gold_Medals_By_Event, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS Silver_Medals_By_Event, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS Bronze_Medals_By_Event, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS Rank_By_Event 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

CREATE TABLE EVENTS_DIM ( 
    ID INT PRIMARY KEY, 
    BASE_EVENT_ID INT,  
    EVENT_GENDER varchar2(1) 
    -- Add additional columns as needed 
);

INSERT INTO EVENTS_DIM (ID, BASE_EVENT_ID, EVENT_GENDER) 
SELECT ID, BASE_EVENT_ID, EVENT_GENDER 
FROM OLYM.OLYM_EVENTS;

CREATE TABLE BASE_EVENTS_DIM ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE_ID INT,  
    EVENT varchar2(60) 
);

INSERT INTO BASE_EVENTS_DIM (ID,DISCIPLINE_ID, EVENT) 
SELECT ID, DISCIPLINE_ID, EVENT 
FROM OLYM.OLYM_BASE_EVENTS;

CREATE TABLE DISCIPLINE_DIM ( 
    ID INT PRIMARY KEY, 
    DISCIPLINE varchar2(30) 
);

INSERT INTO DISCIPLINE_DIM (ID, DISCIPLINE) 
SELECT ID, DISCIPLINE 
FROM OLYM.OLYM_DISCIPLINES;

CREATE TABLE OLYM_MEDALS_FACT ( 
    Event_ID INT, 
    Base_Event_ID INT, 
    Bronze_Medals INT, 
    Silver_Medals INT, 
    Gold_Medals INT, 
    Total_Medals INT, 
    FOREIGN KEY (Event_ID) REFERENCES EVENTS_DIM(ID), 
    FOREIGN KEY (Base_Event_ID) REFERENCES BASE_EVENTS_DIM(ID) 
);

INSERT INTO OLYM_MEDALS_FACT (Event_ID) 
SELECT ID 
FROM EVENTS_DIM;

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Bronze_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Bronze' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Silver_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Silver' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Gold_Medals = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE M.MEDAL = 'Gold' AND M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.TOTAL_MEDALS = ( 
    SELECT COUNT(M.ID) 
    FROM OLYM.OLYM_MEDALS M 
    WHERE (M.MEDAL = 'Gold' OR M.MEDAL = 'Silver' OR M.MEDAL = 'Bronze') AND  M.EVENT_ID = MF.Event_ID 
);

UPDATE OLYM_MEDALS_FACT MF 
SET MF.Base_Event_ID = ( 
    SELECT E.BASE_EVENT_ID 
    FROM OLYM.OLYM_EVENTS E 
    WHERE  E.ID = MF.EVENT_ID 
);

SELECT * 
FROM OLYM_MEDALS_FACT 
ORDER BY Event_ID;

SELECT 
    COALESCE(E.EVENT_GENDER, 'All Genders') AS EVENT_GENDER, 
    BA.EVENT, 
    COALESCE(M.MEDAL, 'TIE') AS DOMINANT_MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
RIGHT JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    COALESCE(E.EVENT_GENDER, 'NON SPECIFIED') AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS_DIM E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS Gold_Medals_By_Event, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS Silver_Medals_By_Event, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS Bronze_Medals_By_Event, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS Rank_By_Event 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

SELECT 
    COALESCE(E.EVENT_GENDER, 'All Genders') AS EVENT_GENDER, 
    BA.EVENT, 
    COALESCE(M.MEDAL, 'TIE') AS DOMINANT_MEDAL, 
    COUNT(*) AS MedalCount 
FROM OLYM.OLYM_MEDALS M 
RIGHT JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON E.BASE_EVENT_ID = BA.ID 
GROUP BY CUBE (E.EVENT_GENDER, BA.EVENT, M.MEDAL);

SELECT 
    COALESCE(E.EVENT_GENDER, 'NON SPECIFIED') AS EVENT_GENDER, 
    SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) AS Gold_Medals, 
    COUNT(*) AS Total_Medals, 
    (SUM(CASE WHEN M.MEDAL = 'Gold' THEN 1 ELSE 0 END) * 1.0) / COUNT(*) AS Gold_Medal_Ratio 
FROM OLYM.OLYM_MEDALS M 
JOIN EVENTS_DIM E ON M.EVENT_ID = E.ID 
GROUP BY ROLLUP (E.EVENT_GENDER);

SELECT 
    E.EVENT_GENDER, 
    BA.EVENT, 
    M.Total_Medals, 
    SUM(M.GOLD_MEDALS) OVER (PARTITION BY E.ID) AS Gold_Medals_By_Event, 
    SUM(M.SILVER_MEDALS) OVER (PARTITION BY E.ID) AS Silver_Medals_By_Event, 
    SUM(M.BRONZE_MEDALS) OVER (PARTITION BY E.ID) AS Bronze_Medals_By_Event, 
    RANK() OVER (PARTITION BY E.ID ORDER BY M.Total_Medals DESC) AS Rank_By_Event 
FROM OLYM_MEDALS_FACT M 
JOIN EVENTS_DIM E ON M.Event_ID = E.ID 
JOIN BASE_EVENTS_DIM BA ON M.BASE_EVENT_ID = BA.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID;

SELECT 
    BE.EVENT AS BaseEvent, 
    E.EVENT_GENDER, 
    D.DISCIPLINE, 
    SUM(M.GOLD_MEDALS) AS NumberOfGoldMedals 
FROM BASE_EVENTS_DIM BE 
JOIN EVENTS_DIM E ON BE.ID = E.BASE_EVENT_ID 
JOIN DISCIPLINE_DIM D ON BE.DISCIPLINE_ID = D.ID 
JOIN OLYM_MEDALS_FACT M ON E.ID = M.EVENT_ID 
GROUP BY BE.EVENT, E.EVENT_GENDER, D.DISCIPLINE 
HAVING SUM(M.GOLD_MEDALS) > 10;

